"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""

import asyncio
import threading
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telethon.sync import TelegramClient
from telethon.errors import SessionPasswordNeededError

from ..keyboards import main_keyboard, sessions_keyboard, cancel_keyboard
from .. import storage
from ..config import DEVICE_CONFIG


def log(message):
    """–ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print(f"[Bot] {message}")


def register_account_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"""
    
    @bot.message_handler(func=lambda m: m.text == 'üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º')
    def handle_account_management(msg):
        chat_id = msg.chat.id
        log('üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–æ–º')
        
        if not storage.accounts:
            bot.send_message(chat_id, '‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', reply_markup=main_keyboard())
        else:
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(KeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞'))
            markup.add(KeyboardButton('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'))
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)
    
    @bot.message_handler(func=lambda m: m.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    def handle_main_menu(msg):
        chat_id = msg.chat.id
        log('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
        storage.states.pop(chat_id, None)
        bot.send_message(chat_id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=main_keyboard())
    
    @bot.message_handler(func=lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
    def handle_add_account(msg):
        chat_id = msg.chat.id
        log('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
        
        storage.states[chat_id] = {'step': 'api_id'}
        bot.send_message(
            chat_id, 
            '–í–≤–µ–¥–∏—Ç–µ api_id:', 
            reply_markup=cancel_keyboard()
        )
    
    @bot.message_handler(func=lambda m: m.text == '‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
    def handle_delete_account(msg):
        chat_id = msg.chat.id
        log('‚ùå –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
        
        if not storage.accounts:
            bot.send_message(chat_id, '‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', reply_markup=main_keyboard())
            return
        
        storage.states[chat_id] = {'step': 'remove'}
        bot.send_message(
            chat_id, 
            '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', 
            reply_markup=sessions_keyboard()
        )
    
    @bot.message_handler(func=lambda m: m.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
    def handle_settings_account(msg):
        chat_id = msg.chat.id
        log('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞')
        
        if not storage.accounts:
            bot.send_message(chat_id, '‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤', reply_markup=main_keyboard())
            return
        
        storage.states[chat_id] = {'step': 'select_account_settings', 'action': 'account_management'}
        bot.send_message(
            chat_id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
            reply_markup=sessions_keyboard()
        )

