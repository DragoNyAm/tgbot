"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞"""

import threading
import asyncio
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telethon.sync import TelegramClient
from telethon.sessions import StringSession

from ..keyboards import main_keyboard, cancel_keyboard
from ..config import DEVICE_CONFIG
from .. import storage


def handle_parser_states(bot, msg):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, False –∏–Ω–∞—á–µ
    """
    state = storage.states.get(msg.chat.id, {}).get('step')
    
    # –í—ã–±–æ—Ä —Å–µ—Å—Å–∏–∏
    if state == 'parser_select_session':
        if msg.text not in storage.accounts:
            bot.send_message(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è.')
            return True
        
        storage.states[msg.chat.id] = {
            'step': 'parser_enter_chat_id',
            'session': msg.text
        }
        bot.send_message(
            msg.chat.id,
            'üìù –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: -1001234567890 –∏–ª–∏ @channelname',
            reply_markup=cancel_keyboard()
        )
        return True
    
    # –í–≤–æ–¥ ID —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    elif state == 'parser_enter_chat_id':
        chat_id_to_parse = msg.text.strip()
        
        storage.states[msg.chat.id]['chat_id_to_parse'] = chat_id_to_parse
        storage.states[msg.chat.id]['step'] = 'parser_enter_message_limit'
        
        bot.send_message(
            msg.chat.id,
            'üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞:\n\n'
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 100-500\n'
            '–ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π = –±–æ–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –¥–æ–ª—å—à–µ –æ–±—Ä–∞–±–æ—Ç–∫–∞',
            reply_markup=cancel_keyboard()
        )
        return True
    
    # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    elif state == 'parser_enter_message_limit':
        try:
            message_limit = int(msg.text.strip())
            if message_limit <= 0:
                bot.send_message(msg.chat.id, '‚ùå –ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.')
                return True
            
            if message_limit > 1000:
                bot.send_message(
                    msg.chat.id, 
                    '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –±–æ–ª–µ–µ 1000 —Å–æ–æ–±—â–µ–Ω–∏–π.\n'
                    '–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:'
                )
                return True
            
            storage.states[msg.chat.id]['message_limit'] = message_limit
            storage.states[msg.chat.id]['step'] = 'parser_select_message_type'
            
            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add(KeyboardButton('üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'), KeyboardButton('üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞'))
            kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            
            bot.send_message(
                msg.chat.id,
                'üì® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                reply_markup=kb
            )
            return True
            
        except ValueError:
            bot.send_message(msg.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
            return True
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif state == 'parser_select_message_type':
        if msg.text == 'üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
            storage.states[msg.chat.id]['is_forward'] = False
            storage.states[msg.chat.id]['step'] = 'parser_enter_broadcast_message'
            
            bot.send_message(
                msg.chat.id,
                'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:',
                reply_markup=cancel_keyboard()
            )
            return True
            
        elif msg.text == 'üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞':
            storage.states[msg.chat.id]['is_forward'] = True
            storage.states[msg.chat.id]['step'] = 'parser_enter_forward_channel'
            
            bot.send_message(
                msg.chat.id,
                'üì¢ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞:\n\n'
                '–ù–∞–ø—Ä–∏–º–µ—Ä: @channelname –∏–ª–∏ -1001234567890\n\n'
                '–ë–æ—Ç –≤–æ–∑—å–º–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –±—É–¥–µ—Ç –µ–≥–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å.',
                reply_markup=cancel_keyboard()
            )
            return True
        else:
            bot.send_message(msg.chat.id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
            return True
    
    # –í–≤–æ–¥ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏
    elif state == 'parser_enter_forward_channel':
        channel_id = msg.text.strip()
        session_name = storage.states[msg.chat.id]['session']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        async def get_last_message():
            acc = storage.accounts[session_name]
            client = TelegramClient(
                StringSession(acc['string_session']),
                acc['api_id'], acc['api_hash'],
                **DEVICE_CONFIG
            )
            await client.start()
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
                entity = await client.get_entity(channel_id)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                messages = await client.get_messages(entity, limit=1)
                
                if not messages or len(messages) == 0:
                    return None, None, None, "–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
                
                last_msg = messages[0]
                channel_title = getattr(entity, 'title', getattr(entity, 'username', 'Unknown'))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º channel_id –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (–∫–∞–∫ –≤–≤–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
                # –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –º—ã —Å–º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å entity —Å–Ω–æ–≤–∞
                return channel_id, entity, last_msg.id, channel_title
                
            except Exception as e:
                return None, None, None, str(e)
            finally:
                await client.disconnect()
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        forward_from_chat_id, entity, forward_message_id, result = loop.run_until_complete(get_last_message())
        loop.close()
        
        if forward_from_chat_id and forward_message_id and entity:
            storage.states[msg.chat.id]['forward_from_chat_id'] = forward_from_chat_id
            storage.states[msg.chat.id]['forward_message_id'] = forward_message_id
            storage.states[msg.chat.id]['step'] = 'parser_enter_delay'
            
            bot.send_message(
                msg.chat.id,
                f'‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n'
                f'–ö–∞–Ω–∞–ª: {result}\n'
                f'ID —Å–æ–æ–±—â–µ–Ω–∏—è: {forward_message_id}\n\n'
                f'‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):\n\n'
                f'–ú–∏–Ω–∏–º—É–º: 3 —Å–µ–∫—É–Ω–¥—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)\n'
                f'–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 5-10 —Å–µ–∫—É–Ω–¥',
                reply_markup=cancel_keyboard()
            )
        else:
            bot.send_message(
                msg.chat.id,
                f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:\n{result}\n\n'
                f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                reply_markup=cancel_keyboard()
            )
        return True
    
    # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    elif state == 'parser_enter_broadcast_message':
        if not msg.text:
            bot.send_message(
                msg.chat.id,
                '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
                reply_markup=cancel_keyboard()
            )
            return True
        
        storage.states[msg.chat.id]['broadcast_message'] = msg.text
        storage.states[msg.chat.id]['step'] = 'parser_enter_delay'
        
        bot.send_message(
            msg.chat.id,
            '‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö):\n\n'
            '–ú–∏–Ω–∏–º—É–º: 3 —Å–µ–∫—É–Ω–¥—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)\n'
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 5-10 —Å–µ–∫—É–Ω–¥',
            reply_markup=cancel_keyboard()
        )
        return True
    
    # –í–≤–æ–¥ –∑–∞–¥–µ—Ä–∂–∫–∏
    elif state == 'parser_enter_delay':
        try:
            delay = float(msg.text.strip())
            if delay < 3:
                bot.send_message(
                    msg.chat.id, 
                    '‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–Ω—å—à–µ 3 —Å–µ–∫—É–Ω–¥ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–∞–Ω—É!\n'
                    '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–µ–Ω–µ–µ 3 —Å–µ–∫—É–Ω–¥:'
                )
                return True
            
            state_data = storage.states[msg.chat.id]
            session_name = state_data['session']
            chat_id_to_parse = state_data['chat_id_to_parse']
            message_limit = state_data['message_limit']
            is_forward = state_data.get('is_forward', False)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if is_forward:
                forward_from_chat_id = state_data['forward_from_chat_id']
                forward_message_id = state_data['forward_message_id']
                broadcast_message = None
            else:
                broadcast_message = state_data['broadcast_message']
                forward_from_chat_id = None
                forward_message_id = None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if session_name in storage.tasks:
                bot.send_message(
                    msg.chat.id,
                    f'‚ùå –î–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞.',
                    reply_markup=main_keyboard()
                )
                storage.states.pop(msg.chat.id, None)
                return True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä
            from ..workers.user_parser import parser_broadcast_worker
            
            stop_event = threading.Event()
            thread = threading.Thread(
                target=parser_broadcast_worker,
                args=(session_name, chat_id_to_parse, message_limit, broadcast_message, delay, stop_event, msg.chat.id, is_forward, forward_from_chat_id, forward_message_id)
            )
            thread.start()
            
            storage.add_task(session_name, thread, stop_event)
            
            message_type = 'üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞' if is_forward else 'üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
            bot.send_message(
                msg.chat.id,
                f'‚úÖ –ó–∞–ø—É—â–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞!\n\n'
                f'üì± –ê–∫–∫–∞—É–Ω—Ç: {session_name}\n'
                f'üí¨ –ß–∞—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {chat_id_to_parse}\n'
                f'üìä –°–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {message_limit}\n'
                f'üì® –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}\n'
                f'‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫\n\n'
                f'‚è≥ –°–Ω–∞—á–∞–ª–∞ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,\n'
                f'–∑–∞—Ç–µ–º –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞.',
                reply_markup=main_keyboard()
            )
            
            storage.states.pop(msg.chat.id, None)
            return True
            
        except ValueError:
            bot.send_message(msg.chat.id, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.')
            return True
    
    return False

