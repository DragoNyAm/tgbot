"""–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–Ω—é"""

from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from ..keyboards import main_keyboard, sessions_keyboard
from .. import storage


def register_main_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    @bot.message_handler(commands=['start', 'help'])
    def cmd_start(msg):
        bot.send_message(msg.chat.id, 'üëã –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=main_keyboard())
    
    @bot.message_handler(func=lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
    def handle_add_account(msg):
        storage.states[msg.chat.id] = {'step': 'api_id'}
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(msg.chat.id, '–í–≤–µ–¥–∏—Ç–µ api_id:', reply_markup=kb)
    
    @bot.message_handler(func=lambda m: m.text == '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
    def handle_remove_account_start(msg):
        if not storage.accounts:
            bot.send_message(msg.chat.id, '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.', reply_markup=main_keyboard())
        else:
            storage.states[msg.chat.id] = {'step': 'remove'}
            bot.send_message(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', reply_markup=sessions_keyboard())
    
    @bot.message_handler(func=lambda m: m.text == '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    def handle_start_broadcast(msg):
        if not storage.accounts:
            bot.send_message(msg.chat.id, '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤.', reply_markup=main_keyboard())
        else:
            storage.states[msg.chat.id] = {'step': 'b_select_session'}
            bot.send_message(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=sessions_keyboard())
    
    @bot.message_handler(func=lambda m: m.text == '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')
    def handle_stop_broadcast(msg):
        if not storage.tasks:
            bot.send_message(msg.chat.id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.', reply_markup=main_keyboard())
        else:
            storage.states[msg.chat.id] = {'step': 'stop'}
            bot.send_message(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', reply_markup=sessions_keyboard())
    
    @bot.message_handler(func=lambda m: m.text == '–û—Ç–º–µ–Ω–∞')
    def handle_cancel(msg):
        storage.states.pop(msg.chat.id, None)
        bot.send_message(msg.chat.id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=main_keyboard())

