"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""

import asyncio
import threading
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.tl.types import PeerChannel
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

from .. import storage
from ..keyboards import (
    main_keyboard, sessions_keyboard, cancel_keyboard,
    broadcast_chats_method_keyboard, chat_type_keyboard,
    save_config_keyboard, configs_keyboard
)
from ..config import DEVICE_CONFIG
from ..workers.broadcast import broadcast_worker


def handle_broadcast_session_selection(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()

    if text not in storage.accounts:
        bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è.', reply_markup=main_keyboard())
        storage.states.pop(chat_id)
        return
    state['name'] = text
    state['step'] = 'b_select_method'
    bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤:', reply_markup=broadcast_chats_method_keyboard())


def handle_broadcast_method_selection(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()
    session_name = state['name']

    if text == '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é':
        if session_name in storage.configs and storage.configs[session_name]:
            state['step'] = 'b_select_config'
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:', reply_markup=configs_keyboard(session_name))
        else:
            bot.send_message(chat_id, '–î–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.', reply_markup=broadcast_chats_method_keyboard())
    elif text == '–í—ã–±—Ä–∞—Ç—å –ø–æ —Ç–∏–ø—É':
        state['step'] = 'b_select_type'
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Ç–æ–≤:', reply_markup=chat_type_keyboard())
    elif text == '–í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é':
        state['step'] = 'b_manual_input_chats'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É (–∫–∞–∂–¥—ã–π —á–∞—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):', reply_markup=kb)
    elif text == '–ù–∞–∑–∞–¥':
        storage.states[chat_id] = {'step': 'b_select_session'}
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Å—Å–∏—é –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=sessions_keyboard())
    else:
        bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.', reply_markup=broadcast_chats_method_keyboard())


def handle_broadcast_config_selection(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()
    session_name = state['name']

    if session_name in storage.configs and text in storage.configs[session_name]:
        state['chats'] = storage.configs[session_name][text]
        state['step'] = 'b_select_message_type'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'), KeyboardButton('üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞'))
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(
            chat_id, 
            'üì® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', 
            reply_markup=kb
        )
    elif text == '–ù–∞–∑–∞–¥':
        state['step'] = 'b_select_method'
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤:', reply_markup=broadcast_chats_method_keyboard())
    else:
        bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è.', reply_markup=configs_keyboard(session_name))


def handle_broadcast_type_selection(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()
    session_name = state['name']
    selected_type = text

    if selected_type not in ['üì¢ –í—Å–µ –∫–∞–Ω–∞–ª—ã', 'üë• –í—Å–µ –≥—Ä—É–ø–ø—ã', 'üí¨ –í—Å–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã', 'üìã –í—Å–µ —á–∞—Ç—ã', '–ù–∞–∑–∞–¥']:
        bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —á–∞—Ç–∞.', reply_markup=chat_type_keyboard())
        return

    if selected_type == '–ù–∞–∑–∞–¥':
        state['step'] = 'b_select_method'
        bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–æ–≤:', reply_markup=broadcast_chats_method_keyboard())
        return

    bot.send_message(chat_id, '‚è≥ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...')

    async def get_and_filter_chats():
        client = TelegramClient(
            StringSession(storage.accounts[session_name]['string_session']),
            storage.accounts[session_name]['api_id'],
            storage.accounts[session_name]['api_hash'],
            **DEVICE_CONFIG
        )
        try:
            await client.connect()
            if not await client.is_user_authorized():
                bot.send_message(chat_id, '‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞', reply_markup=main_keyboard())
                return

            dialogs = await client.get_dialogs()
            filtered_chats = []
            for dialog in dialogs:
                chat = dialog.entity
                if hasattr(chat, 'id'):
                    chat_type = "–ö–∞–Ω–∞–ª" if hasattr(chat, 'broadcast') and chat.broadcast else \
                              "–ì—Ä—É–ø–ø–∞" if hasattr(chat, 'megagroup') and chat.megagroup else \
                              "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞" if hasattr(chat, 'gigagroup') and chat.gigagroup else \
                              "–õ–∏—á–Ω—ã–π —á–∞—Ç"

                    should_add = False
                    if selected_type == 'üìã –í—Å–µ —á–∞—Ç—ã':
                        should_add = True
                    elif selected_type == 'üì¢ –í—Å–µ –∫–∞–Ω–∞–ª—ã' and chat_type == '–ö–∞–Ω–∞–ª':
                        should_add = True
                    elif selected_type == 'üë• –í—Å–µ –≥—Ä—É–ø–ø—ã' and (chat_type == '–ì—Ä—É–ø–ø–∞' or chat_type == '–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞'):
                        should_add = True
                    elif selected_type == 'üí¨ –í—Å–µ –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã' and chat_type == '–õ–∏—á–Ω—ã–π —á–∞—Ç':
                        should_add = True

                    if should_add:
                        formatted_id = chat.id
                        if chat_type in ["–ö–∞–Ω–∞–ª", "–ì—Ä—É–ø–ø–∞", "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞"]:
                            if str(formatted_id).startswith('100'):
                                formatted_id = f"-{formatted_id}"
                            else:
                                formatted_id = f"-100{formatted_id}"
                        
                        filtered_chats.append(str(formatted_id))

            if filtered_chats:
                state['chats'] = filtered_chats
                state['step'] = 'b_select_message_type'
                kb = ReplyKeyboardMarkup(resize_keyboard=True)
                kb.add(KeyboardButton('üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'), KeyboardButton('üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞'))
                kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
                bot.send_message(
                    chat_id, 
                    f'‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_chats)} —á–∞—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.\n\n'
                    f'üì® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', 
                    reply_markup=kb
                )
            else:
                bot.send_message(chat_id, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞.", reply_markup=chat_type_keyboard())

        except Exception as e:
            bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤: {str(e)}', reply_markup=broadcast_chats_method_keyboard())
            state['step'] = 'b_select_method'
        finally:
            await client.disconnect()

    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    threading.Thread(target=lambda: loop.run_until_complete(get_and_filter_chats())).start()


def handle_broadcast_manual_chats_input(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()

    try:
        chats = []
        for c in text.split('\n'):
            c = c.strip()
            if c:
                if 't.me/' in c:
                    if '+' in c:
                        invite_hash = c.split('t.me/+')[-1].split('?')[0].strip()
                        chats.append(f"+{invite_hash}")
                    else:
                        username = c.split('t.me/')[-1].split('?')[0].strip()
                        chats.append(username)
                elif c.startswith('@'):
                    chats.append(c[1:])
                elif c.startswith('-100'):
                    chats.append(c)
                elif c.startswith('-'):
                    chats.append(f"-100{c[1:]}")
                elif c.isdigit():
                    chats.append(c)
                else:
                    chats.append(c)

        if not chats:
            kb = ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
            bot.send_message(chat_id, '–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∞—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É:', reply_markup=kb)
            return

        state['chats'] = chats
        state['step'] = 'b_select_message_type'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'), KeyboardButton('üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞'))
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(
            chat_id, 
            'üì® –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', 
            reply_markup=kb
        )
    except Exception as e:
        bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}', reply_markup=broadcast_chats_method_keyboard())
        storage.states.pop(chat_id)


def handle_broadcast_message_type_selection(msg, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()
    
    if text == 'üìù –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ':
        state['is_forward'] = False
        state['step'] = 'b_message'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, 'üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:', reply_markup=kb)
        
    elif text == 'üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞':
        state['is_forward'] = True
        state['step'] = 'b_enter_forward_channel'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(
            chat_id,
            'üì¢ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞:\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: @channelname –∏–ª–∏ -1001234567890\n\n'
            '–ë–æ—Ç –≤–æ–∑—å–º–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –±—É–¥–µ—Ç –µ–≥–æ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å.',
            reply_markup=kb
        )
    else:
        bot.send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')


def handle_broadcast_forward_channel_input(msg, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏"""
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    channel_id = msg.text.strip()
    session_name = state['name']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    import asyncio
    
    async def get_last_message():
        acc = storage.accounts[session_name]
        client = TelegramClient(
            StringSession(acc['string_session']),
            acc['api_id'], acc['api_hash'],
            **DEVICE_CONFIG
        )
        await client.start()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º entity –∫–∞–Ω–∞–ª–∞
            entity = await client.get_entity(channel_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages = await client.get_messages(entity, limit=1)
            
            if not messages or len(messages) == 0:
                return None, None, None, "–í –∫–∞–Ω–∞–ª–µ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"
            
            last_msg = messages[0]
            channel_title = getattr(entity, 'title', getattr(entity, 'username', 'Unknown'))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º channel_id –≤ –∏—Å—Ö–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            return channel_id, entity, last_msg.id, channel_title
            
        except Exception as e:
            return None, None, None, str(e)
        finally:
            await client.disconnect()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    forward_from_chat_id, entity, forward_message_id, result = loop.run_until_complete(get_last_message())
    loop.close()
    
    if forward_from_chat_id and forward_message_id and entity:
        state['forward_from_chat_id'] = forward_from_chat_id
        state['forward_message_id'] = forward_message_id
        state['step'] = 'b_delay_msg'
        
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(
            chat_id,
            f'‚úÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!\n'
            f'–ö–∞–Ω–∞–ª: {result}\n'
            f'ID —Å–æ–æ–±—â–µ–Ω–∏—è: {forward_message_id}\n\n'
            f'–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫):',
            reply_markup=kb
        )
    else:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(
            chat_id,
            f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞:\n{result}\n\n'
            f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            reply_markup=kb
        )


def handle_broadcast_message_input(msg, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    chat_id = msg.chat.id
    state = storage.states[chat_id]

    if not msg.text:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(
            chat_id,
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.',
            reply_markup=kb
        )
        return
    
    state['message'] = msg.text.strip()
    state['step'] = 'b_delay_msg'
    
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    bot.send_message(chat_id, '–ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å–µ–∫):', reply_markup=kb)


def handle_broadcast_delay_msg_input(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()

    try:
        delay_msg = float(text)
        if delay_msg < 0:
            raise ValueError("–ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        state['delay_msg'] = delay_msg
        state['step'] = 'b_delay_iter'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, '–ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (—Å–µ–∫):', reply_markup=kb)
    except ValueError:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:', reply_markup=kb)


def handle_broadcast_delay_iter_input(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()

    try:
        delay_iter = float(text)
        if delay_iter < 0:
            raise ValueError("–ü–∞—É–∑–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π")
        state['delay_iter'] = delay_iter
        state['step'] = 'b_save_config'
        bot.send_message(chat_id, '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –∫–∞–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?', reply_markup=save_config_keyboard())
    except ValueError:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:', reply_markup=kb)


def handle_broadcast_save_config_prompt(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()

    if text == '–î–∞':
        state['step'] = 'b_enter_config_name'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', reply_markup=kb)
    elif text == '–ù–µ—Ç':
        name = state['name']
        is_forward = state.get('is_forward', False)
        forward_from_chat_id = state.get('forward_from_chat_id')
        forward_message_id = state.get('forward_message_id')
        
        stop_event = threading.Event()
        thread = threading.Thread(
            target=broadcast_worker,
            args=(name, state['chats'], state.get('message'), state['delay_msg'], state['delay_iter'], stop_event, chat_id, is_forward, forward_from_chat_id, forward_message_id),
            daemon=True
        )
        storage.tasks[name] = (thread, stop_event)
        thread.start()
        
        message_type = 'üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞' if is_forward else 'üìù –¢–µ–∫—Å—Ç'
        bot.send_message(chat_id, f'‚ñ∂Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {name}\n–¢–∏–ø: {message_type}', reply_markup=main_keyboard())
        storage.states.pop(chat_id)
    elif text == '–ù–∞–∑–∞–¥':
        state['step'] = 'b_delay_iter'
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—É–∑—É –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏ (—Å–µ–∫):', reply_markup=kb)
    else:
        bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é?', reply_markup=save_config_keyboard())


def handle_broadcast_config_name_input(msg, bot):
    chat_id = msg.chat.id
    state = storage.states[chat_id]
    text = msg.text.strip()
    config_name = text
    session_name = state['name']

    if not config_name:
        kb = ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
        bot.send_message(chat_id, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:', reply_markup=kb)
        return

    if session_name not in storage.configs:
        storage.configs[session_name] = {}

    storage.configs[session_name][config_name] = state['chats']
    storage.save_accounts()

    bot.send_message(chat_id, f'‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è "{config_name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_name}.', reply_markup=main_keyboard())

    name = state['name']
    is_forward = state.get('is_forward', False)
    forward_from_chat_id = state.get('forward_from_chat_id')
    forward_message_id = state.get('forward_message_id')
    
    stop_event = threading.Event()
    thread = threading.Thread(
        target=broadcast_worker,
        args=(name, state['chats'], state.get('message'), state['delay_msg'], state['delay_iter'], stop_event, chat_id, is_forward, forward_from_chat_id, forward_message_id),
        daemon=True
    )
    storage.tasks[name] = (thread, stop_event)
    thread.start()
    
    message_type = 'üì§ –ü–µ—Ä–µ—Å—ã–ª–∫–∞' if is_forward else 'üìù –¢–µ–∫—Å—Ç'
    bot.send_message(chat_id, f'‚ñ∂Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è {name}\n–¢–∏–ø: {message_type}', reply_markup=main_keyboard())
    storage.states.pop(chat_id)


def handle_stop_broadcast_selection(msg, bot):
    chat_id = msg.chat.id
    text = msg.text.strip()

    if text in storage.tasks:
        thread, stop_event = storage.tasks.pop(text)
        stop_event.set()
        bot.send_message(chat_id, f'‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {text}', reply_markup=main_keyboard())
    elif f"auto::{text}" in storage.tasks:
        thread, stop_event = storage.tasks.pop(f"auto::{text}")
        stop_event.set()
        bot.send_message(chat_id, f'‚èπÔ∏è –ê–≤—Ç–æ–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è {text}', reply_markup=main_keyboard())
    else:
        bot.send_message(chat_id, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏.', reply_markup=main_keyboard())
    storage.states.pop(chat_id)

