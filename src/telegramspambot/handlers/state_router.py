"""–†–æ—É—Ç–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""

import asyncio
import threading
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import SessionPasswordNeededError

from .. import storage
from ..keyboards import main_keyboard, cancel_keyboard, account_settings_keyboard, sessions_keyboard
from ..config import DEVICE_CONFIG

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–∑ –º–æ–¥—É–ª–µ–π
from .broadcast_state_handlers import (
    handle_broadcast_session_selection,
    handle_broadcast_method_selection,
    handle_broadcast_config_selection,
    handle_broadcast_type_selection,
    handle_broadcast_manual_chats_input,
    handle_broadcast_message_type_selection,
    handle_broadcast_forward_channel_input,
    handle_broadcast_message_input,
    handle_broadcast_delay_msg_input,
    handle_broadcast_delay_iter_input,
    handle_broadcast_save_config_prompt,
    handle_broadcast_config_name_input,
    handle_stop_broadcast_selection
)
from .chat_state_handlers import (
    handle_account_chats_selection,
    handle_account_join_selection,
    handle_join_chats_input
)
from .auto_subscribe_state_handlers import (
    handle_auto_select_session,
    handle_auto_target_chats_input,
    handle_auto_message,
    handle_auto_delay
)
from .settings_state_handlers import (
    handle_settings_menu,
    handle_logging_settings
)
from .parser_state_handlers import handle_parser_states


def log(message):
    """–ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print(f"[Bot] {message}")


def register_state_router(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    def handle_api_id_input(msg):
        chat_id = msg.chat.id
        text = msg.text.strip()
        
        try:
            api_id = int(text)
            storage.states[chat_id] = {
                'step': 'api_hash',
                'api_id': api_id
            }
            bot.send_message(
                chat_id, 
                '–í–≤–µ–¥–∏—Ç–µ api_hash:', 
                reply_markup=cancel_keyboard()
            )
        except ValueError:
            bot.send_message(
                chat_id, 
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç api_id. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:', 
                reply_markup=cancel_keyboard()
            )
    
    def handle_api_hash_input(msg):
        chat_id = msg.chat.id
        text = msg.text.strip()
        
        storage.states[chat_id] = {
            'step': 'phone',
            'api_id': storage.states[chat_id]['api_id'],
            'api_hash': text
        }
        bot.send_message(
            chat_id, 
            '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (+...):', 
            reply_markup=cancel_keyboard()
        )
    
    def handle_phone_input(msg):
        chat_id = msg.chat.id
        text = msg.text.strip()
        
        if not text.startswith('+'):
            bot.send_message(
                chat_id, 
                '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +...:', 
                reply_markup=cancel_keyboard()
            )
            return
        
        storage.states[chat_id] = {
            'step': 'session_name',
            'api_id': storage.states[chat_id]['api_id'],
            'api_hash': storage.states[chat_id]['api_hash'],
            'phone': text
        }
        bot.send_message(
            chat_id, 
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–µ—Å—Å–∏–∏:', 
            reply_markup=cancel_keyboard()
        )
    
    def handle_session_name_input(msg):
        chat_id = msg.chat.id
        text = msg.text.strip()
        
        if text in storage.accounts:
            bot.send_message(
                chat_id,
                '‚ùå –°–µ—Å—Å–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:',
                reply_markup=cancel_keyboard()
            )
            return
        
        storage.states[chat_id]['session_name'] = text
        
        def run_async():
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º StringSession –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
                client = TelegramClient(
                    StringSession(),
                    storage.states[chat_id]['api_id'],
                    storage.states[chat_id]['api_hash'],
                    device_model=DEVICE_CONFIG['device_model'],
                    system_version=DEVICE_CONFIG['system_version'],
                    app_version=DEVICE_CONFIG['app_version'],
                    lang_code=DEVICE_CONFIG['lang_code'],
                    system_lang_code=DEVICE_CONFIG['system_lang_code'],
                    loop=loop
                )
                
                storage.states[chat_id]['client'] = client
                storage.states[chat_id]['loop'] = loop
                
                async def send_code():
                    try:
                        await client.connect()
                        await client.send_code_request(storage.states[chat_id]['phone'])
                    except Exception as e:
                        log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞ –¥–ª—è {text}: {e}")
                        raise
                
                log(f"üìû –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –¥–ª—è {text} ({storage.states[chat_id]['phone']})")
                loop.run_until_complete(send_code())
                storage.states[chat_id]['step'] = 'code'
                bot.send_message(
                    chat_id, 
                    '–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram:', 
                    reply_markup=cancel_keyboard()
                )
            except Exception as e:
                bot.send_message(
                    chat_id,
                    f'‚ùå –û—à–∏–±–∫–∞: {str(e)}',
                    reply_markup=main_keyboard()
                )
                storage.states.pop(chat_id, None)
                try:
                    loop.close()
                except:
                    pass
        
        thread = threading.Thread(target=run_async, daemon=True)
        thread.start()
    
    def handle_code_input(msg):
        chat_id = msg.chat.id
        text = msg.text.strip()
        state = storage.states.get(chat_id)
        
        if not state or 'client' not in state or 'loop' not in state:
            return
        
        client = state['client']
        loop = state['loop']
        
        async def sign_in():
            need_2fa = False
            success = False
            try:
                log(f"üîê –í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç {state['session_name']} ({state['phone']})")
                await client.sign_in(state['phone'], text)
                session_name = state['session_name']
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
                string_session = client.session.save()
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                bot.send_message(
                    chat_id,
                    '‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.',
                    reply_markup=cancel_keyboard()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏
                storage.add_account(
                    session_name,
                    state['api_id'],
                    state['api_hash'],
                    state['phone'],
                    string_session
                )
                
                await client.disconnect()
                bot.send_message(
                    chat_id,
                    f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç {session_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
                    reply_markup=main_keyboard()
                )
                storage.states.pop(chat_id, None)
                success = True
            except SessionPasswordNeededError:
                need_2fa = True
                storage.states[chat_id]['step'] = 'password'
                bot.send_message(
                    chat_id,
                    '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA:',
                    reply_markup=cancel_keyboard()
                )
            except Exception as e:
                try:
                    await client.disconnect()
                except:
                    pass
                bot.send_message(
                    chat_id,
                    f'‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {str(e)}',
                    reply_markup=main_keyboard()
                )
                storage.states.pop(chat_id, None)
            
            return need_2fa, success
        
        def run_async():
            try:
                need_2fa, success = loop.run_until_complete(sign_in())
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ù–ï —Ç—Ä–µ–±—É–µ—Ç—Å—è 2FA –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π)
                if not need_2fa:
                    try:
                        loop.close()
                    except:
                        pass
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_async: {e}")
                try:
                    loop.close()
                except:
                    pass
        
        thread = threading.Thread(target=run_async, daemon=True)
        thread.start()
    
    def handle_password_input(msg):
        chat_id = msg.chat.id
        text = msg.text.strip()
        state = storage.states.get(chat_id)
        
        if not state or 'client' not in state or 'loop' not in state:
            return
        
        client = state['client']
        loop = state['loop']
        
        async def sign_in_password():
            try:
                log(f"üîê –í—Ö–æ–¥ —Å 2FA –¥–ª—è {state['session_name']}")
                await client.sign_in(password=text)
                session_name = state['session_name']
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–µ—Å—Å–∏–∏
                string_session = client.session.save()
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å 2FA
                bot.send_message(
                    chat_id,
                    '‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å 2FA! –í—ã –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç.',
                    reply_markup=cancel_keyboard()
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫–∫–∞—É–Ω—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–π —Å–µ—Å—Å–∏–∏
                storage.add_account(
                    session_name,
                    state['api_id'],
                    state['api_hash'],
                    state['phone'],
                    string_session
                )
                
                await client.disconnect()
                bot.send_message(
                    chat_id,
                    f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç {session_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!',
                    reply_markup=main_keyboard()
                )
                storage.states.pop(chat_id, None)
            except Exception as e:
                try:
                    await client.disconnect()
                except:
                    pass
                bot.send_message(
                    chat_id,
                    f'‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —Å 2FA: {str(e)}',
                    reply_markup=main_keyboard()
                )
                storage.states.pop(chat_id, None)
        
        def run_async():
            try:
                loop.run_until_complete(sign_in_password())
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –≤ run_async (password): {e}")
            finally:
                # –í—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞–µ–º loop –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä–æ–ª—è
                try:
                    loop.close()
                except:
                    pass
        
        thread = threading.Thread(target=run_async, daemon=True)
        thread.start()
    
    def handle_remove_account(msg):
        chat_id = msg.chat.id
        text = msg.text.strip()
        
        if text in storage.accounts:
            storage.remove_account(text)
            bot.send_message(
                chat_id,
                f'‚úÖ –ê–∫–∫–∞—É–Ω—Ç {text} —É–¥–∞–ª—ë–Ω',
                reply_markup=main_keyboard()
            )
        else:
            bot.send_message(
                chat_id,
                '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
                reply_markup=main_keyboard()
            )
        storage.states.pop(chat_id, None)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
    def handle_account_settings_selection(msg):
        chat_id = msg.chat.id
        if msg.text not in storage.accounts:
            bot.send_message(chat_id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.', reply_markup=main_keyboard())
            storage.states.pop(chat_id)
            return

        account_name = msg.text
        state = storage.states[chat_id]
        action = state.get('action')

        if action == 'account_management':
            storage.states[chat_id] = {
                'step': 'account_settings_menu',
                'session': account_name
            }
            bot.send_message(chat_id, f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ "{account_name}":', reply_markup=account_settings_keyboard())
        elif action == 'session_settings':
            from ..keyboards import settings_keyboard
            storage.states[chat_id] = {
                'step': 'session_settings',
                'session': account_name
            }
            bot.send_message(chat_id, f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ "{account_name}":', reply_markup=settings_keyboard())
        else:
            bot.send_message(chat_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=main_keyboard())
            storage.states.pop(chat_id)
    
    def handle_account_settings_menu_selection(msg):
        chat_id = msg.chat.id
        state = storage.states[chat_id]
        session_name = state['session']
        
        if msg.text == 'üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è':
            state['step'] = 'change_first_name'
            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è (–∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –µ—Å—Ç—å):')
        elif msg.text == 'üë§ –ò–∑–º–µ–Ω–∏—Ç—å username':
            state['step'] = 'change_username'
            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π username:')
        elif msg.text == 'üìã –ò–∑–º–µ–Ω–∏—Ç—å –±–∏–æ':
            state['step'] = 'change_bio'
            bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:')
        elif msg.text == 'üñº –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä':
            state['step'] = 'change_avatar'
            bot.send_message(chat_id, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∞–≤–∞—Ç–∞—Ä–∞:')
        elif msg.text == '–ù–∞–∑–∞–¥':
            storage.states[chat_id] = {'step': 'select_account_settings', 'action': 'account_management'}
            bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', reply_markup=sessions_keyboard())
    
    def handle_change_first_name_input(msg):
        chat_id = msg.chat.id
        state = storage.states[chat_id]
        
        if msg.text == '–û—Ç–º–µ–Ω–∞':
            storage.states[chat_id]['step'] = 'account_settings_menu'
            bot.send_message(chat_id, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=account_settings_keyboard())
            return

        async def update_name():
            account_name = state['session']
            client = TelegramClient(
                StringSession(storage.accounts[account_name]['string_session']),
                storage.accounts[account_name]['api_id'],
                storage.accounts[account_name]['api_hash'],
                **DEVICE_CONFIG
            )
            await client.start()
            try:
                from telethon.tl.functions.account import UpdateProfileRequest
                names = msg.text.split(' ', 1)
                first_name = names[0]
                last_name = names[1] if len(names) > 1 else ''
                await client(UpdateProfileRequest(
                    first_name=first_name,
                    last_name=last_name
                ))
                bot.send_message(chat_id, '‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=account_settings_keyboard())
            except Exception as e:
                bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏: {e}', reply_markup=account_settings_keyboard())
            finally:
                await client.disconnect()

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(update_name())
        loop.close()
        storage.states[chat_id]['step'] = 'account_settings_menu'
    
    def handle_change_username_input(msg):
        chat_id = msg.chat.id
        state = storage.states[chat_id]
        
        if msg.text == '–û—Ç–º–µ–Ω–∞':
            storage.states[chat_id]['step'] = 'account_settings_menu'
            bot.send_message(chat_id, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ username –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=account_settings_keyboard())
            return

        async def update_username():
            account_name = state['session']
            client = TelegramClient(
                StringSession(storage.accounts[account_name]['string_session']),
                storage.accounts[account_name]['api_id'],
                storage.accounts[account_name]['api_hash'],
                **DEVICE_CONFIG
            )
            await client.start()
            try:
                from telethon.tl.functions.account import UpdateUsernameRequest
                await client(UpdateUsernameRequest(msg.text))
                bot.send_message(chat_id, '‚úÖ Username —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=account_settings_keyboard())
            except Exception as e:
                bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ username: {e}', reply_markup=account_settings_keyboard())
            finally:
                await client.disconnect()

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(update_username())
        loop.close()
        storage.states[chat_id]['step'] = 'account_settings_menu'
    
    def handle_change_bio_input(msg):
        chat_id = msg.chat.id
        state = storage.states[chat_id]
        
        if msg.text == '–û—Ç–º–µ–Ω–∞':
            storage.states[chat_id]['step'] = 'account_settings_menu'
            bot.send_message(chat_id, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∏–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=account_settings_keyboard())
            return

        async def update_bio():
            account_name = state['session']
            client = TelegramClient(
                StringSession(storage.accounts[account_name]['string_session']),
                storage.accounts[account_name]['api_id'],
                storage.accounts[account_name]['api_hash'],
                **DEVICE_CONFIG
            )
            await client.start()
            try:
                from telethon.tl.functions.account import UpdateProfileRequest
                await client(UpdateProfileRequest(about=msg.text))
                bot.send_message(chat_id, '‚úÖ –ë–∏–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', reply_markup=account_settings_keyboard())
            except Exception as e:
                bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–æ: {e}', reply_markup=account_settings_keyboard())
            finally:
                await client.disconnect()

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(update_bio())
        loop.close()
        storage.states[chat_id]['step'] = 'account_settings_menu'
    
    def handle_change_avatar_input(msg):
        chat_id = msg.chat.id
        state = storage.states[chat_id]
        
        if msg.text == '–û—Ç–º–µ–Ω–∞':
            storage.states[chat_id]['step'] = 'account_settings_menu'
            bot.send_message(chat_id, '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=account_settings_keyboard())
            return
            
        if not msg.photo:
            bot.send_message(chat_id, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ.', reply_markup=account_settings_keyboard())
            return

        account_name = state['session']
        file_info = bot.get_file(msg.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        photo_path = f'{account_name}_avatar.jpg'
        with open(photo_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        async def update_avatar():
            client = TelegramClient(
                StringSession(storage.accounts[account_name]['string_session']),
                storage.accounts[account_name]['api_id'],
                storage.accounts[account_name]['api_hash'],
                **DEVICE_CONFIG
            )
            await client.start()
            try:
                from telethon.tl.functions.photos import UploadProfilePhotoRequest, DeletePhotosRequest
                import os
                photo = await client.upload_file(photo_path)
                
                try:
                    existing_photos = await client.get_profile_photos('me')
                    await client(DeletePhotosRequest(id=[p.photo.id for p in existing_photos]))
                except Exception:
                    pass

                await client(UploadProfilePhotoRequest(photo))
                bot.send_message(chat_id, '‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', reply_markup=account_settings_keyboard())
            except Exception as e:
                bot.send_message(chat_id, f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞: {e}', reply_markup=account_settings_keyboard())
            finally:
                await client.disconnect()
                if os.path.exists(photo_path):
                    os.remove(photo_path)

        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        threading.Thread(target=lambda: loop.run_until_complete(update_avatar())).start()
        storage.states[chat_id]['step'] = 'account_settings_menu'
    
    @bot.message_handler(func=lambda m: m.chat.id in storage.states)
    def handle_states(msg):
        """–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        chat_id = msg.chat.id
        state = storage.states.get(chat_id)
        text = msg.text.strip()

        if state is None:
            return

        if text == '–û—Ç–º–µ–Ω–∞':
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if 'client' in state and 'loop' in state:
                try:
                    client = state['client']
                    loop = state['loop']
                    loop.run_until_complete(client.disconnect())
                    loop.close()
                except:
                    pass
            
            storage.states.pop(chat_id, None)
            bot.send_message(chat_id, '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', reply_markup=main_keyboard())
            return

        step = state['step']

        # Map of step handlers
        step_handlers = {
            # Account management
            'api_id': handle_api_id_input,
            'api_hash': handle_api_hash_input,
            'phone': handle_phone_input,
            'session_name': handle_session_name_input,
            'code': handle_code_input,
            'password': handle_password_input,
            'remove': handle_remove_account,
            
            # Account settings
            'select_account_settings': handle_account_settings_selection,
            'account_settings_menu': handle_account_settings_menu_selection,
            'change_first_name': handle_change_first_name_input,
            'change_username': handle_change_username_input,
            'change_bio': handle_change_bio_input,
            'change_avatar': handle_change_avatar_input,
        }
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π bot
        step_handlers_with_bot = {
            # Session settings
            'session_settings': handle_settings_menu,
            'logging_settings': handle_logging_settings,
            
            # Broadcast
            'b_select_session': handle_broadcast_session_selection,
            'b_select_method': handle_broadcast_method_selection,
            'b_select_config': handle_broadcast_config_selection,
            'b_select_type': handle_broadcast_type_selection,
            'b_manual_input_chats': handle_broadcast_manual_chats_input,
            'b_select_message_type': handle_broadcast_message_type_selection,
            'b_enter_forward_channel': handle_broadcast_forward_channel_input,
            'b_message': handle_broadcast_message_input,
            'b_delay_msg': handle_broadcast_delay_msg_input,
            'b_delay_iter': handle_broadcast_delay_iter_input,
            'b_save_config': handle_broadcast_save_config_prompt,
            'b_enter_config_name': handle_broadcast_config_name_input,
            
            # Stop
            'stop': handle_stop_broadcast_selection,
            
            # Chat management
            'select_account_chats': handle_account_chats_selection,
            'select_account_join': handle_account_join_selection,
            'join_chats_input': handle_join_chats_input,
            
            # Auto subscribe
            'auto_select_session': handle_auto_select_session,
            'auto_target_chats': handle_auto_target_chats_input,
            'auto_message': handle_auto_message,
            'auto_delay': handle_auto_delay,
        }

        # Call appropriate handler if exists
        if step in step_handlers:
            step_handlers[step](msg)
        elif step in step_handlers_with_bot:
            step_handlers_with_bot[step](msg, bot)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥–∞
        elif handle_parser_states(bot, msg):
            return
        else:
            bot.send_message(chat_id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.', reply_markup=main_keyboard())
            storage.states.pop(chat_id)

