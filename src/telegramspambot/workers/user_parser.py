"""–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""

import asyncio
import time
from telethon.sync import TelegramClient
from telethon.sessions import StringSession
from telethon.errors import PersistentTimestampOutdatedError
from telethon.tl.types import PeerUser, PeerChannel, PeerChat, User

from ..config import DEVICE_CONFIG
from .. import storage
from ..utils import log_message, handle_persistent_timestamp_error, is_russian_phone, is_non_russian_text


async def parse_users_from_chat(client, chat_id_to_parse, message_limit, bot_chat_id, session_name):
    """–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ —è–∑—ã–∫—É/–Ω–æ–º–µ—Ä—É
    
    Args:
        client: Telethon –∫–ª–∏–µ–Ω—Ç
        chat_id_to_parse: ID —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        message_limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        bot_chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–≥–æ–≤
        session_name: –ò–º—è —Å–µ—Å—Å–∏–∏
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
    """
    filtered_users = []
    user_messages = {}  # user_id -> –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    try:
        log_message(bot_chat_id, session_name, f"‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞ {chat_id_to_parse}...", 'progress')
        
        # –ü–æ–ª—É—á–∞–µ–º entity —á–∞—Ç–∞
        try:
            if isinstance(chat_id_to_parse, str):
                if chat_id_to_parse.startswith('-100'):
                    # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                    chat_id_int = int(chat_id_to_parse[4:])
                    chat_entity = await client.get_entity(PeerChannel(chat_id_int))
                elif chat_id_to_parse.startswith('-'):
                    # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
                    chat_id_int = int(chat_id_to_parse[1:])
                    chat_entity = await client.get_entity(PeerChat(chat_id_int))
                else:
                    # Username –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç - –ø—É—Å—Ç—å API —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç
                    chat_entity = await client.get_entity(chat_id_to_parse)
            else:
                # –ß–∏—Å–ª–æ–≤–æ–π ID
                if str(chat_id_to_parse).startswith('-100'):
                    # –°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
                    chat_entity = await client.get_entity(PeerChannel(int(str(abs(chat_id_to_parse))[3:])))
                elif chat_id_to_parse < 0:
                    # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞
                    chat_entity = await client.get_entity(PeerChat(abs(chat_id_to_parse)))
                else:
                    # Username –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    chat_entity = await client.get_entity(chat_id_to_parse)
        except Exception as e:
            log_message(bot_chat_id, session_name, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: {str(e)}", 'error')
            return []
        
        log_message(bot_chat_id, session_name, f"‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {getattr(chat_entity, 'title', 'Unknown')}", 'success')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        log_message(bot_chat_id, session_name, f"‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ {message_limit} —Å–æ–æ–±—â–µ–Ω–∏–π...", 'progress')
        messages = await client.get_messages(chat_entity, limit=message_limit)
        
        log_message(bot_chat_id, session_name, f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π", 'success')
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for message in messages:
            if message.sender_id and not message.sender_id in user_messages:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ (—Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if message.text:
                    user_messages[message.sender_id] = message.text
        
        log_message(bot_chat_id, session_name, f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(user_messages)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 'success')
        log_message(bot_chat_id, session_name, f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...", 'progress')
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        processed = 0
        for user_id, user_text in user_messages.items():
            processed += 1
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user = await client.get_entity(PeerUser(user_id))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–Ω–µ –±–æ—Ç–æ–º)
                if not isinstance(user, User):
                    continue
                
                if user.bot:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
                if user.phone:
                    if is_russian_phone(user.phone):
                        # –†—É—Å—Å–∫–∏–π –Ω–æ–º–µ—Ä - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        log_message(bot_chat_id, session_name, 
                                  f"üá∑üá∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name or 'Unknown'}) –∏–º–µ–µ—Ç —Ä—É—Å—Å–∫–∏–π –Ω–æ–º–µ—Ä - –ø—Ä–æ–ø—É—â–µ–Ω", 
                                  'progress')
                        continue
                    else:
                        # –ù–µ —Ä—É—Å—Å–∫–∏–π –Ω–æ–º–µ—Ä - –¥–æ–±–∞–≤–ª—è–µ–º
                        filtered_users.append(user_id)
                        log_message(bot_chat_id, session_name, 
                                  f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name or 'Unknown'}) –¥–æ–±–∞–≤–ª–µ–Ω (–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä)", 
                                  'success')
                        continue
                
                # –ù–æ–º–µ—Ä —Å–∫—Ä—ã—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
                if is_non_russian_text(user_text):
                    filtered_users.append(user_id)
                    log_message(bot_chat_id, session_name, 
                              f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name or 'Unknown'}) –¥–æ–±–∞–≤–ª–µ–Ω (–Ω–µ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)", 
                              'success')
                else:
                    log_message(bot_chat_id, session_name, 
                              f"üá∑üá∫ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({user.first_name or 'Unknown'}) –ø–∏—à–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º - –ø—Ä–æ–ø—É—â–µ–Ω", 
                              'progress')
                
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å —Ñ–ª—É–¥
                if processed % 10 == 0:
                    await asyncio.sleep(1)
                    
            except Exception as e:
                log_message(bot_chat_id, session_name, 
                          f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}", 
                          'progress')
                continue
        
        log_message(bot_chat_id, session_name, 
                  f"‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ {len(filtered_users)} –Ω–µ —Ä—É—Å—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {len(user_messages)}", 
                  'success')
        
    except PersistentTimestampOutdatedError:
        log_message(bot_chat_id, session_name, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ", 'progress')
        recovery_success = await handle_persistent_timestamp_error(client, bot_chat_id, session_name, "–ø–∞—Ä—Å–∏–Ω–≥ —á–∞—Ç–∞")
        if not recovery_success:
            log_message(bot_chat_id, session_name, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é", 'error')
            return []
    except Exception as e:
        log_message(bot_chat_id, session_name, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}", 'error')
        return []
    
    return filtered_users


def parser_broadcast_worker(name, chat_id_to_parse, message_limit, broadcast_message, delay_msg, stop_event, bot_chat_id, is_forward=False, forward_from_chat_id=None, forward_message_id=None):
    """–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –Ω–∏–º
    
    Args:
        name: –ò–º—è —Å–µ—Å—Å–∏–∏
        chat_id_to_parse: ID —á–∞—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        message_limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        broadcast_message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∞)
        delay_msg: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        stop_event: –°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        bot_chat_id: ID —á–∞—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
        is_forward: –§–ª–∞–≥ –ø–µ—Ä–µ—Å—ã–ª–∫–∏
        forward_from_chat_id: ID —á–∞—Ç–∞ —Å –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        forward_message_id: ID –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    async def run():
        acc = storage.accounts[name]
        client = TelegramClient(
            StringSession(acc['string_session']),
            acc['api_id'], acc['api_hash'],
            **DEVICE_CONFIG
        )
        await client.start()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            log_message(bot_chat_id, name, "‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", 'progress')
            try:
                await client.get_dialogs()
                log_message(bot_chat_id, name, "‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 'success')
            except PersistentTimestampOutdatedError:
                log_message(bot_chat_id, name, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", 'progress')
                recovery_success = await handle_persistent_timestamp_error(client, bot_chat_id, name, "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
                if not recovery_success:
                    log_message(bot_chat_id, name, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é.", 'error')
                    return
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –∏ –∫—ç—à–∏—Ä—É–µ–º entity –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if is_forward:
                try:
                    source_entity = await client.get_entity(forward_from_chat_id)
                    log_message(bot_chat_id, name, f"‚úÖ –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –ø–æ–ª—É—á–µ–Ω", 'success')
                except Exception as e:
                    log_message(bot_chat_id, name, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏: {str(e)}", 'error')
                    return
            else:
                source_entity = None
            
            # –ü–∞—Ä—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users_to_message = await parse_users_from_chat(
                client, chat_id_to_parse, message_limit, bot_chat_id, name
            )
            
            if not users_to_message:
                log_message(bot_chat_id, name, "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", 'error')
                return
            
            log_message(bot_chat_id, name, 
                      f"‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ! –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É {len(users_to_message)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...", 
                      'success')
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
            messages_sent = 0
            last_message_time = 0
            
            for user_id in users_to_message:
                if stop_event.is_set():
                    log_message(bot_chat_id, name, "‚èπÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 'progress')
                    break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                current_time = time.time()
                time_since_last = current_time - last_message_time
                min_delay = storage.settings[name]['limits']['delay_between_messages']
                
                if time_since_last < min_delay:
                    await asyncio.sleep(min_delay - time_since_last)
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    user_entity = await client.get_entity(PeerUser(user_id))
                    
                    if is_forward:
                        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (source_entity —É–∂–µ –ø–æ–ª—É—á–µ–Ω)
                        try:
                            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: await client.forward_messages(–∫—É–¥–∞, ID_—Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–∫—É–¥–∞)
                            await client.forward_messages(user_entity, forward_message_id, source_entity)
                        except Exception as forward_error:
                            log_message(bot_chat_id, name, 
                                      f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ: {str(forward_error)}", 
                                      'progress')
                            # –ï—Å–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å - –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            raise
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        await client.send_message(user_entity, broadcast_message)
                    
                    messages_sent += 1
                    last_message_time = time.time()
                    
                    action = "–ø–µ—Ä–µ—Å–ª–∞–Ω–æ" if is_forward else "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                    log_message(bot_chat_id, name, 
                              f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {messages_sent}/{len(users_to_message)} {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", 
                              'success')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
                    if messages_sent >= storage.settings[name]['limits']['messages_per_minute']:
                        log_message(bot_chat_id, name, 
                                  "‚è≥ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É. –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥...", 
                                  'progress')
                        await asyncio.sleep(60)
                        messages_sent = 0
                    
                except PersistentTimestampOutdatedError:
                    log_message(bot_chat_id, name, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", 'progress')
                    recovery_success = await handle_persistent_timestamp_error(client, bot_chat_id, name, f"–æ—Ç–ø—Ä–∞–≤–∫–∞ {user_id}")
                    if recovery_success:
                        # –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
                        try:
                            if is_forward:
                                # source_entity —É–∂–µ –ø–æ–ª—É—á–µ–Ω —Ä–∞–Ω–µ–µ
                                await client.forward_messages(user_entity, forward_message_id, source_entity)
                            else:
                                await client.send_message(user_entity, broadcast_message)
                            messages_sent += 1
                            last_message_time = time.time()
                            action = "–ø–µ—Ä–µ—Å–ª–∞–Ω–æ" if is_forward else "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
                            log_message(bot_chat_id, name, 
                                      f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", 
                                      'success')
                        except Exception as retry_error:
                            log_message(bot_chat_id, name, 
                                      f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(retry_error)}", 
                                      'error')
                    continue
                    
                except Exception as e:
                    error_msg = str(e)
                    log_message(bot_chat_id, name, 
                              f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {error_msg}", 
                              'error')
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                await asyncio.sleep(delay_msg)
            
            log_message(bot_chat_id, name, 
                      f"üéâ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {messages_sent} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ {len(users_to_message)}", 
                      'success')
            
        finally:
            await client.disconnect()
    
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(run())

